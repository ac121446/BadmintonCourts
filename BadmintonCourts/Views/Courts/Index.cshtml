@model PaginatedList<BadmintonCourts.Models.Court>

@{
    ViewData["Title"] = "Index";
}

<h1>Courts</h1>

<p>
    <a class="btn btn-primary" asp-action="Create">Create New</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            <label>Search by Equipment Name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" /></label>
            <input type="submit" value="Search" class="btn btn-outline-primary" /> |
            <a class="btn btn-primary" asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

@if (!Model.Any() && !string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
{
    <div class="alert alert-warning" role="alert">
        No results found for Courts named "@ViewData["CurrentFilter"]".
    </div>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]">Court Name</a>
            </th>
            <th>
                Court Type
            </th>
            <th>
                Price
            </th>
            <th>
                Location
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CourtName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CourtType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Location.LocationName)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.CourtID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.CourtID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.CourtID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
}
@if (Model.Any())
{
    <!-- Pagination links -->
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";

    <div>
        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex - 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-primary @prevDisabled">
            Previous
        </a>

        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-primary @nextDisabled">
            Next
        </a>
    </div>

    <div>
        Page @Model.PageIndex of @Model.TotalPages
    </div>
}